/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  6.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

// Domain size and number of cells.
// * Used by blockMesh in 'constant/polyMesh/blockMeshDict'
//
// - This creates a simple uniform hexahedral mesh

xMin                 0.0;                         // Minimum x-extent of domain (m).
yMin                 0.0;                         // Minimum y-extent of domain (m).
xMax                 3000.0;                      // Maximum x-extent of domain (m).
yMax                 3000.0;                      // Maximum y-extent of domain (m).

// Domain heights and number of cells (level 1).
zMin                     0.0;                      // Minimum z-extent of domain (m).
zMax1                  600.0;                      // Maximum z-extent of domain (m).
nx1                      300;                      // Number of cells in x-direction.
ny1                      300;                      // Number of cells in y-direction.
nz1                       60;                      // Number of cells in z-direction.

// Domain heights and number of cells (level 2).
zMin2                  600.0;                      // Minimum z-extent of domain (m).
zMax2                  700.0;                      // Maximum z-extent of domain (m).
nx2                      300;                      // Number of cells in x-direction.
ny2                      300;                      // Number of cells in y-direction.
nz2                       10;                      // Number of cells in z-direction.

// Domain heights and number of cells (level 3).
zMin3                  700.0;                      // Minimum z-extent of domain (m).
zMax3                  800.0;                      // Maximum z-extent of domain (m).
nx3                      300;                      // Number of cells in x-direction.
ny3                      300;                      // Number of cells in y-direction.
nz3                       10;                      // Number of cells in z-direction.

// Domain heights and number of cells (level 4).
zMin4                  800.0;                      // Minimum z-extent of domain (m).
zMax                  1000.0;                      // Maximum z-extent of domain (m).
nx4                      300;                      // Number of cells in x-direction.
ny4                      300;                      // Number of cells in y-direction.
nz4                       20;                      // Number of cells in z-direction.




// Number of cores and domain decomposition information.
// * Used by decomposePar in 'system/decomposeParDict'
//
// - The common decomposistion algorithms are simple and scotch.
//   Simple scales better for large problems on nice regular meshes,
//   but scotch is geometrically general.
nCores               144;                         // Number of cores on which to run this case.
decompType           scotch;                      // Decomposition algorithm.  "simple" and "scotch" are good choices.
decompOrder          (6 6 6);                     // Order of the decomposition number of partitions in (x y z)-directions (only for simple).



// Planar averaging and source term statistics options.
// * Used by the planarAveraging function object in 'system/sampling/planarAveraging'
writeSource                 true;
writeSourceInterval         1;
writePlanarAverage          true;
writePlanarAverageInterval  1;



// Wind driving conditions.
// * Used by the solver in 'constant/ABLProperties'
//
// - This is all for simple, single height, time-invariant, P-control.
// - For more complex configurations, see constant/ABLProperties.
windControlHeight    80.0;                        // The height at which the mean wind is specified (m).
windSpeed            8.0;                         // The specified mean wind speed at that height (m/s).
windDir              270.0;                       // The specified mean wind direction at that height (degrees).



// Initial values for the variables.
// * Used by setFieldsABL in 'system/setFieldsABLDict'
// * Used in the initial fields in '0'
//
// - Note that U and T get overwritten if setFieldsABL is called.
U0                  (8.0 0.0 0.0);               // Initial condition for wind speed (m/s).
T0                   300.0;                       // Initial condition for potential temperature (K).
p_rgh0               0.0;                         // Initial pressure (minus the hydrostatic variation and normalized by density) (m^2/s^2).
nut0                 0.0;                         // Initial SGS viscosity (m^2/s).
k0                   0.1;                         // Initial SGS turbulent kinetic energy (m^2/s^2).
kappat0              0.0;                         // Initial SGS temperature diffusivity (m^2/s).

TGradUpper           0.003;                       // Potential temperature gradient above the strong inversion (K/m).
zInversion           750.0;                       // Height of the middle of the initial strong capping inversion (m).
inversionWidth       100.0;                       // Vertical width of the intial strong capping inversion (m).
TBottom              300.0;                       // Initial potential temperature at bottom of strong capping inversion (K).
TTop                 305.0;                       // Initial potential temperature at top of strong capping inversion (K).



// General conditions and parameters.
// * Used by solver in 'constant/ABLProperties'
// * Used by solver in 'constant/transportProperties'
Pr                   0.7;                         // Molecular Prandtl number.
Prt                  0.33333333;                  // Turbulent Prandtl number.
nu                   1.0E-5;                      // Molecular viscosity (m^2/s).
TRef                 300.0;                       // Reference potential temperature (K).
latitude             41.3;                        // Latitude on the Earth of the site (deg).
EarthPeriod          24.0;                        // Earth's rotation period (hr).



// SGS model inputs.
// * Used by solver in 'constant/LESProperties'
LESModel             kEqnABL;                     // SGS model selection.
ce                   0.93;                        // SGS model constant.
ck                   0.0673;                      // SGS model constant.



// Surface conditions.
// * Used by solver in '0/Rwall' and '0/qwall'
qwall               (0.0 0.0 0.0);                // Temperature flux at wall (modify the z-value).  A negative value is flux into domain (K-m/s).
Rwall               (0.0 0.0 0.0 0.0 0.0 0.0);    // Initial wall shear stress (m^2/s^2).
kappa                0.4;                         // von Karman constant.
z0                   0.15;                        // Surface roughness (m).
wallModelAverageType "planarAverage";             // Treat surface stress wall model locally ("local") or with planar averaging ("planarAverage").
betaM                16.0;                        // Monin-Obukhov wall shear stress model constant.
gammaM               5.0;                         // Monin-Obukhov wall shear stress model constant.
betaH                9.0;                         // Monin-Obukhov wall temperature flux model constant.
gammaH               7.8;                         // Monin-Obukhov wall temperature flux model constant.
alphaH               1.0;                         // Monin-Obukhov wall temperature flux model constant.
heatingRate          0.0;                         // Surface temperature change rate (when not directly setting temperature flux) (K/s).



#inputMode           merge

// ************************************************************************* //

