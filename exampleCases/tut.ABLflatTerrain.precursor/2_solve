#!/bin/bash
#SBATCH --job-name=runTutPrec
#SBATCH --output foam2run_%a.log
#SBATCH --ntasks=288         # Change on setUp as well
#SBATCH --time=2-00
#SBATCH --account=car
#SBATCH --qos=high

source $HOME/.bash_profile
cores=$SLURM_NTASKS

echo "Working directory is" $SLURM_SUBMIT_DIR
echo "Job name is" $SLURM_JOB_NAME
echo "Submit time is" $(squeue -u $USER -o '%30j %20V' | grep -e $SLURM_JOB_NAME | awk '{print $2}')
echo "Starting OpenFOAM job at: " $(date)
echo "using" $cores "core(s)"

# ******************************************** USER INPUT ******************************************** #
OpenFOAM-6-gcc-dev              # OpenFOAM/SOWFA version. OpenFOAM-6-{gcc,intel}-{central,dev}
startTime=0                     # Start time
timeBdData=5000                 # Time executed further after endTime. Also saves averages
stabState=neutral               # neutral, stable, unstable
solver=superDeliciousVanilla
initializer=setFieldsABL
# **************************************************************************************************** #

# **************************************** PERFORM SOME CHECKS *************************************** #
if [ ! -f foam1preprocess.log ];                                        then echo "Job killed (1)"; scancel $SLURM_JOBID; fi
if [ ! -f system/controlDict.$solver.startAt$startTime ];               then echo "Job killed (2)"; scancel $SLURM_JOBID; fi
if [ $initializer = setFieldsABL ] && [ ! -f system/setFieldsABLDict ]; then echo "Job killed (3)"; scancel $SLURM_JOBID; fi
if [ ! -f setUp ];                                                      then echo "Job killed (4)"; scancel $SLURM_JOBID; fi
if [ $(foamDictionary -entry "nCores" -value setUp) -ne $cores ];       then echo "Job killed (5)"; scancel $SLURM_JOBID; fi
if [ ! -f system/sampling/boundaryData ];                               then echo "Job killed (6)"; scancel $SLURM_JOBID; fi

endTime=$(foamDictionary -entry "endTime" -value system/controlDict.$solver.startAt$startTime)
writeInterval=$(foamDictionary -entry "writeInterval" -value system/controlDict.$solver.startAt$startTime)
latestTime=$(foamListTimes -processor -latestTime -withZero | tail -1)

if [ $(echo "$endTime%$writeInterval" | bc) -ne 0 ]; then touch  "WARNING (1)"; fi
# **************************************************************************************************** #

# ***************************** COPY APPROPRIATE FILES AND SET VARIABLES ***************************** #
cp system/controlDict.$solver.startAt$startTime        system/controlDict

ln -f foam2run_${SLURM_JOBID}.log foam2run_startAt$latestTime
# **************************************************************************************************** #

# Run decomposePar if domain not yet decomposed
if [ ! -d "processor0" ]; then
	decomposePar -cellDist -force > log.2.decomposePar 2>&1
fi

# Run the flow field initializer
if [ $initializer = setFieldsABL ] && [ ! -f log.2.$initializer ];  then
   srun -n $cores --cpu_bind=cores $initializer -parallel > log.2.$initializer 2>&1
fi

# Split run to get to developed-flow stage
if [ $latestTime -lt $endTime ]; then
    foamDictionary -entry "fieldAverages.enabled" -set "false" system/sampling/fieldAverages
    foamDictionary -entry "temporalAverages.enabled" -set "false" system/sampling/temporalAverages
    foamDictionary -entry "boundaryData.enabled" -set "false" system/sampling/boundaryData
    srun -n $cores --cpu_bind=cores $solver -parallel > log.2.$solver.startAt$latestTime 2>&1
fi

# Split run to save boundaryData and averages
continueTime=$(( $latestTime > $endTime ? $latestTime : $endTime ))
foamDictionary -entry "fieldAverages.timeStart"    -set $endTime system/sampling/fieldAverages
foamDictionary -entry "temporalAverages.timeStart" -set $endTime system/sampling/temporalAverages
foamDictionary -entry "fieldAverages.enabled"      -set "true" system/sampling/fieldAverages
foamDictionary -entry "temporalAverages.enabled"   -set "true" system/sampling/temporalAverages
foamDictionary -entry "boundaryData.enabled"       -set "true" system/sampling/boundaryData
foamDictionary -entry "startTime" -set $continueTime -disableFunctionEntries system/controlDict
foamDictionary -entry "endTime" -set $(echo $endTime+$timeBdData | bc) -disableFunctionEntries system/controlDict
srun -n $cores --cpu_bind=cores $solver -parallel > log.2.$solver.saveBdData.startAt$continueTime 2>&1

# Make the precursor data ready for future mapping and adjust the initial time of boundaryData
if [ -d processor0/$endTime ] && [ ! -f log.3.reconstructPar ]; then
    reconstructPar -time $endTime > log.3.reconstructPar 2>&1
    for dir in north south east west; do
        ln -sf $(ls postProcessing/boundaryData/$dir | head -1) postProcessing/boundaryData/$dir/$endTime
    done
else
    touch "WARNING (2)"
    echo "Case not reconstructed and first time of boundaryData not fixed. Check if endTime dir exists."
fi

echo "Ending OpenFOAM job at: " $(date)

rm foam2run_${SLURM_JOBID}.log

# **************************************************************************************************** #
