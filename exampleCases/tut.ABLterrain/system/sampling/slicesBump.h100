slicesBump
{
    type surfaces;
    functionObjectLibs ( "libsampling.so" );
    writeControl        adjustableRunTime;
    writeInterval       100;
    fields
    (
      U
      T
      p_rgh
      UMean
      UPrime2Mean
    );
    interpolationScheme cell;      // cell, cellPoint, cellPointCell
    surfaceFormat           vtk;


// For = 40m
// x/h = -2.5  -> x = -100
// x/h = -1.25 -> x = -50
// x/h = 0     -> x = 0
// x/h = 1.25  -> x = 50
// x/h = 2.5   -> x = 100
// x/h = 3.75  -> x = 150
// x/h = 5     -> x = 200
// x/h = 6.25  -> x = 250
// x/h = 7.5   -> x = 300
// 
// 
// For = 100m
// x/h = -2.5  -> x = -250
// x/h = -1.25 -> x = -125
// x/h = 0     -> x = 0
// x/h = 1.25  -> x = 125
// x/h = 2.5   -> x = 250
// x/h = 3.75  -> x = 375
// x/h = 5     -> x = 500
// x/h = 6.25  -> x = 625
// x/h = 7.5   -> x = 750


     surfaces
     (
        terrain.100
        {
            type            patchInternalField;
            patches         ( lower );
            interpolate     true;
            offsetMode      uniform;
            offset          (0 0 100);
            triangulate     true;
        }
        terrain.200
        {
            type            patchInternalField;
            patches         ( lower );
            interpolate     true;
            offsetMode      uniform;
            offset          (0 0 200);
            triangulate     true;
        }
        terrain.20
        {
            type            patchInternalField;
            patches         ( lower );
            interpolate     true;
            offsetMode      uniform;
            offset          (0 0 20);
            triangulate     true;
        }
        //
        yNormal.m250
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (0 -250 0);
                normalVector (0 1 0);
            }
            interpolate true;
        }
        yNormal.m125
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (0 -125 0);
                normalVector (0 1 0);
            }
            interpolate true;
        }
        yNormal.0
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (0 0 0);
                normalVector (0 1 0);
            }
            interpolate true;
        }
        yNormal.125
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (0 125 0);
                normalVector (0 1 0);
            }
            interpolate true;
        }
        yNormal.250
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (0 250 0);
                normalVector (0 1 0);
            }
            interpolate true;
        }
        yNormal.375
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (0 375 0);
                normalVector (0 1 0);
            }
            interpolate true;
        }
        yNormal.500
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (0 500 0);
                normalVector (0 1 0);
            }
            interpolate true;
        }
        yNormal.625
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {        
                basePoint (0 625 0);
                normalVector (0 1 0);
            }
            interpolate true;
        }
        yNormal.750
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (0 750 0);
                normalVector (0 1 0);
            }
            interpolate true;
        }
	//
        xNormal.m250
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (-250 0  0);
                normalVector (1 0 0);
            }
            interpolate true;
        }
        xNormal.m125
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (-125 0 0);
                normalVector (1 0 0);
            }
            interpolate true;
        }
        xNormal.0
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (0 0 0);
                normalVector (1 0 0);
            }
            interpolate true;
        }
        xNormal.125
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (125 0 0);
                normalVector (1 0 0);
            }
            interpolate true;
        }
        xNormal.250
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (250 0 0);
                normalVector (1 0 0);
            }
            interpolate true;
        }
        xNormal.375
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (375 0 0);
                normalVector (1 0 0);
            }
            interpolate true;
        }
        xNormal.500
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (500 0 0);
                normalVector (1 0 0);
            }
            interpolate true;
        }
        xNormal.625
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (625 0 0);
                normalVector (1 0 0);
            }
            interpolate true;
        }
        xNormal.750
        {
            type cuttingPlane;
            planeType pointAndNormal;
            pointAndNormalDict
            {
                basePoint (750 0 0);
                normalVector (1 0 0);
            }
            interpolate true;
        }
      );
}
