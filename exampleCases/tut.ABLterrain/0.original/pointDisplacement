/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       pointVectorField;
    location    "0";
    object      pointMotionU;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 0 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    upper
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    lower
    {
        type            surfaceDisplacement;
        value           uniform (0 0 0);

        // Clip displacement to surface by max deltaT*velocity.
        velocity            (10 10 10);

        geometry
        {
            terrain.stl
            {
                type triSurfaceMesh;
            }
        };

        // Find projection with surface:
        //     fixedNormal : intersections along prespecified direction
        //     pointNormal : intersections along current pointNormal of patch
        //     nearest     : nearest point on surface
        // Other
        projectMode fixedNormal;

        // if fixedNormal : normal
        projectDirection (0 0 1);

        //- -1 or component to knock out before doing projection
        wedgePlane      -1;

        //- Points that should remain fixed
        // frozenPointsZone fixedPointsZone;
    }

//    minZ
//    {
//        type            surfaceSlipDisplacement;
//        geometry
//        {
//            hellskull.stl
//            {
//                type triSurfaceMesh;
//            }
//        };
//
//        followMode fixedNormal;
//
//        projectDirection (0 0 1);
//
//        //- -1 or component to knock out before doing projection
//        wedgePlane      -1;
//
//        //- Points that should remain fixed
//        // frozenPointsZone fixedPointsZone;
//    }

    east
    {
        type            fixedNormalSlip;
        n               (1 0 0);
    }

    west
    {
        type            fixedNormalSlip;
        n               (1 0 0);
    }

    south
    {
        type            fixedNormalSlip;
        n               (0 1 0);
    }

    north
    {
        type            fixedNormalSlip;
        n               (0 1 0);
    }
}


// ************************************************************************* //
