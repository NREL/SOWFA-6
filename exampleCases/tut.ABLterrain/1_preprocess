#!/bin/bash
#SBATCH --job-name=setupTerrain
#SBATCH --output foam1preprocess.log
#SBATCH --ntasks=576
#SBATCH --time=4:00:00
#SBATCH --mem=180G
#SBATCH --account=mmc

source $HOME/.bash_profile
cores=$SLURM_NTASKS

echo "Working directory is" $SLURM_SUBMIT_DIR
echo "Job name is" $SLURM_JOB_NAME
echo "Submit time is" $(squeue -u $USER -o '%30j %20V' | grep -e $SLURM_JOB_NAME | awk '{print $2}')
echo "Starting OpenFOAM job at: " $(date)
echo "using" $cores "core(s)"

# ******************************************** USER INPUT ******************************************** #
OpenFOAM-6-gcc-dev        # OpenFOAM/SOWFA version. OpenFOAM-6-{gcc,intel}-{central,dev}
startTime=0               # Start time
stabState=neutral         # neutral, stable, unstable
terrainSTL=biglow_xm15001to16009_ym5005to15485_blendFlatNSEW_shifted.stl
temperatureBC=TstableThroughout   # T{stableThroughout,strongInv,unif}  Only used if initializer != precursor
initializer=precursor     # precursor, setFieldsABL, none. If precursor, set precursorDir, mapTime
    precursorDir=~/OpenFOAM/rthedin-6/run/precursor/neutral.W.5at80.5dTInv.0p05z
    mapTime=20000
    # Change diffusivity on dynamicMeshDict depending on geometry (no quadratic for bump)
# **************************************************************************************************** #

# **************************************** PERFORM SOME CHECKS *************************************** #
if [ ! -f system/controlDict.moveDynamicMesh ];                  then echo "Job killed (1)"; scancel $SLURM_JOBID; fi
if ! { [ -f setUp.$stabState ] || [ -f $precursorDir/setUp ]; }; then echo "Job killed (2)"; scancel $SLURM_JOBID; fi
if [ ! -f 0.original/qwall.$stabState ];                         then echo "Job killed (3)"; scancel $SLURM_JOBID; fi
if [ ! -f 0.original/pointDisplacement ];                        then echo "Job killed (4)"; scancel $SLURM_JOBID; fi
if [ ! -f constant/dynamicMeshDict ];                            then echo "Job killed (5)"; scancel $SLURM_JOBID; fi
if [ ! -f constant/triSurface/$terrainSTL ] ;                    then echo "Job killed (6)"; scancel $SLURM_JOBID; fi
if [ $initializer != precursor ] && [ $(foamDictionary -entry "nCores" -value setUp.$stabState) -ne $cores ]; 
                                                                 then echo "Job killed (7)"; scancel $SLURM_JOBID; fi

if [ $initializer = precursor ] && [ ! -d $precursorDir/postProcessing/boundaryData ];  then echo "Job killed (8)"; scancel $SLURM_JOBID; fi
if [ $initializer = precursor ] && [ ! -f $precursorDir/constant/givenSourceU ];        then echo "Job killed (9)"; scancel $SLURM_JOBID; fi
if [ $initializer = precursor ] && [ ! -d $precursorDir/$startTime ];                   then echo "Job killed (10)";scancel $SLURM_JOBID; fi
if [ $initializer = setFieldsABL ] && [ ! -f system/setFieldsABLDict.Ugeo.$temperatureBC ]; then echo "Job killed (11)"; scancel $SLURM_JOBID; fi
# **************************************************************************************************** #

# ***************************** COPY APPROPRIATE FILES AND SET VARIABLES ***************************** #
rm -f problemFaces
cd constant/triSurface  &&  ln -sf $terrainSTL    terrain.stl  &&  cd ../..
cp system/controlDict.moveDynamicMesh                  system/controlDict
cp setUp.$stabState                                    setUp
cp system/fvSolution.mesh                              system/fvSolution
cp system/fvSchemes.mesh                               system/fvSchemes
rm -rf constant/polyMesh
rm -rf constant/boundaryData
rm -rf $startTime $mapTime

if [ $initializer = precursor ]; then
    cp constant/ABLProperties.givenSourceFiles            constant/ABLProperties
elif [ $initializer = setFieldsABL ]; then
    cp constant/ABLProperties.computerGivenOneSpeedAndDir constant/ABLProperties
else
    cp constant/ABLProperties.noSources                   constant/ABLProperties
fi

windDir=$(foamDictionary -entry "windDir" -value setUp)
if   (($windDir==0 || $windDir==360));   then inflowDir=north;
elif ((0<$windDir&& $windDir<90));       then inflowDir=northeast;
elif (($windDir==90));                   then inflowDir=east;
elif ((90<$windDir&& $windDir<180));     then inflowDir=southeast;
elif (($windDir==180));                  then inflowDir=south;
elif ((180<$windDir&& $windDir<270));    then inflowDir=southwest;
elif (($windDir==270));                  then inflowDir=west;
elif ((270<$windDir&& $windDir<360));    then inflowDir=northwest;
else touch "WARNING_1"; fi

if [ $initializer != precursor ] && [ ! -f system/changeDictionaryDict.inflowOutflow.$temperatureBC.$inflowDir ]; then touch "WARNING_2"; fi
# **************************************************************************************************** #

if [ $initializer = precursor ]; then
    startTime=$(( $mapTime > $startTime ? $mapTime : $startTime ))

    # Get information from the precursor
    cp $precursorDir/setUp                                 setUp
    rm -f setUp.*
    foamDictionary -entry "nCores" -set $cores setUp
    foamDictionary -entry "wallModelAverageType" -set "local" setUp

    # Copy the startTime solution dir from precursor 
    mkdir $startTime.fromPrec
    cp -f $precursorDir/$startTime/{U,T,k,kappat,nut,p_rgh,qwall,Rwall} $startTime.fromPrec
    cp -rf $startTime.fromPrec $startTime
    cp 0.original/pointDisplacement $startTime/

    # Change the wall model type to 'local' from precursor's 'planarAverage'
    foamDictionary -entry "boundaryField.lower.averageType" -set "local" $startTime/Rwall

    # Make the link to the boundary data
    ln -sf $precursorDir/postProcessing/boundaryData constant/boundaryData
    ln -sf $precursorDir/constant/givenSource* constant/

    # Copy the mesh from precursor
    cp -rf $precursorDir/constant/polyMesh constant/

    # Data from precursor has cyclic boundaries. Change that because of the nature of moveDynamicMesh
    changeDictionary -dict system/changeDictionaryDict.TVMIO -time $startTime -subDict dictionaryReplacement > log.1.changeDictionary.TVMIO 2>&1

else
    # Copy the "clean" .original initial fields to a working copy
    cp -rf $startTime.original $startTime
    cp     $startTime/qwall.$stabState   $startTime/qwall  &&  rm $startTime/qwall.*
    rm -f  $startTime/{T.*,U.*}

    # Build the mesh
    blockMesh -noFunctionObjects > log.1.blockMesh 2>&1

    # Change the BC depending on the inflowDir
    changeDictionary -dict system/changeDictionaryDict.inflowOutflow.$temperatureBC.$inflowDir -time $startTime -subDict dictionaryReplacement > log.1.changeDictionary.inflowOutflow.$temperatureBC.$inflowDir 2>&1
fi

# Decompose the mesh
foamDictionary -entry "startTime" -set $startTime        system/controlDict
foamDictionary -entry "endTime" -set $(($startTime+100)) system/controlDict
decomposePar -cellDist -force -time $startTime > log.1.decomposePar 2>&1

# Check the mesh
srun -n $cores checkMesh -noFunctionObjects -parallel > log.1.checkMesh.background 2>&1

# Make the mesh conform to the terrain boundary
srun -n $cores moveDynamicMesh -noFunctionObjects -parallel > log.1.moveDynamicMesh 2>&1

# Check the final mesh
srun -n $cores checkMesh -latestTime -noFunctionObjects -parallel > log.1.checkMesh.final 2>&1

# Extract volume information  over time from the moveDynamicMesh output
printf 'time \t min cell vol \t max cell vol \t total vol' > log.1.volumeMeshHistory
grep -e "Total volume" -e "^Time" log.1.moveDynamicMesh | awk 'NR%2 {print $4 "\t" $8 "\t" $12} !(NR%2) {printf $3 "\t"}' >> log.1.volumeMeshHistory 2>&1

# Make the last directory from moveDynamicMesh be the startTime dir
endTimeMesh=$(foamListTimes -processor -latestTime | tail -1)
for (( c=0; c<$cores; c++)); do
    if [ ! -d processor$c/$startTime/polyMesh ]; then mkdir -p processor$c/$startTime/polyMesh; fi
    mv processor$c/$endTimeMesh/polyMesh processor$c/$startTime/
    mv processor$c/$startTime processor$c/temp
    find processor$c -mindepth 1 -type d -not -path "*constant*" -not -path "*temp*" -exec rm -rf {} +
    mv processor$c/temp processor$c/$startTime
done

# Fix/Initialize the internalFields
if [ $initializer != none ] && [ ! -f log.2.setFieldsABL.$initializer ]; then
    if [ $initializer = setFieldsABL ];  then
        cp system/setFieldsABLDict.Ugeo.$temperatureBC  system/setFieldsABLDict
    elif [ $initializer = precursor ]; then
        cp system/setFieldsABLDict.Uscale.Tnone  system/setFieldsABLDict
    fi
    srun -n $cores --cpu_bind=cores setFieldsABL -parallel > log.1.setFieldsABL.$initializer 2>&1
fi

echo "Ending OpenFOAM job at: " $(date)

# **************************************************************************************************** #
