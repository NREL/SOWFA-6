/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;

    root            "";
    case            "";
    instance        "";
    local           "";

    class           dictionary;
    object          ABLProperties;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "../setUp"


// Properties of the mesoscale source terms.  
momentumSource
{
    type        "computed";                            // The source terms will be computed given velocity values.
    inputType   "component";                           // Velocity component (u_x, u_y, u_z) will be given.
    #include "../../drivingData/fieldTable"            // Table of velocity versus time and height.

    // This case will use the profile assimilation technique which employs a PI controller based on a polynomial
    // fit of the error profile with height. The controller form is s = gain*(alpha*e + (1-alpha)*int_e).
    gain        0.2;                                   // Overall gain of controller.
    setVerticalCompZero true;                          // Explicitly set the vertical source term to zero.
    regSmoothing        true;                          // Employ smoothing of error profile with height by polynomial fitting.
    regOrder    3;                                     // Set the polynomial to cubic.
    alpha       1.0;                                   // Make this a pure proportional controller.
    timeWindow  1800.0;                                // Time window for integral control.
    writeError  false;                                 // Do not write out the error time-height history.
    weightsTable                                       // Define a weighting profile for the cubic fit.  Here weighting is equal everywhere.
    (
        (0.0    1.0)
        (1000.0 1.0)
        (4000.0 1.0)
    );
}

temperatureSource
{
    type        "computed";
    #include "../../drivingData/fieldTable"

    gain        0.2;
    regSmoothing    true;
    regOrder    3;
    alpha       1.0;
    timeWindow  1800.0;
    writeError  false;
    weightsTable
    (
        (0.0    1.0)
        (1000.0 1.0)
        (4000.0 1.0)
    );
}


// Sponge layer parameters.
spongeList
{
//   upperSponge
//   {
//        type             "Rayleigh";                  // Type of sponge layer: "none" (Default), "Rayleigh" or "viscous".
//        patch            "upper";                     // Apply patch on a specific patch.
//        width            5000.0;                      // Width of the sponge layer (m). Set this variable if constant, or
//        //widthTable                                  // set this variable if time-varying.
//        //(
//        // ( 0    5000)
//        // ( 1000 6000)
//        // ( 1500 5500)
//        //);
//
//        dampCoeffMax     0.05;                        // Maximum damping coefficient, dimensions depend on type of damping:
//                                                      // Rayleigh (1/s),  viscous  (m^2/s)
//        //dampCoeffMaxTable                           // Time-varying maximum damping coefficient
//        //(
//        //  ( 0    0.05)
//        //  ( 1000 0.1)
//        //  ( 1500 0.07)
//        //);
//
//        cosFraction       1;                          // Fraction of the layer's width that has a smooth transition of viscosity
//                                                      // cosFractionTable is also available 
//
//        dampingComp      "vertical";                  // Components to be damped: "horizontal" for x and y, or "vertical" for z
//                                                      //    if "horizontal" and "Rayleigh", Ux and Uy need to be specified  
//        Ux               10.0;                        // Sponge layer reference velocity in x direction (m/s).
//        Uy               0.0;                         // Sponge layer reference velocity in y direction (m/s).
//
//        // The settings below can be used instead of `patch`, if a more general layer is needed
//        //startLocation    10000.0;                   // Start location of the sponge layer (m)
//        //coordIndex       2;                         // Coordinate index: 0, 1 or 2 corresponding to yz, xz or xy slab.
//        //direction        "stepUp";                  // Shape of damping function: "stepUp" increases smoothly from 0 to 1 in the
//                                                      // specified coordinate direction, "stepDown" decreases in the coordinate direction.
//    }
}


// Pressure splitting type
// Note: before Feb/2021 the default was `rhokSplit`, and now the default is `rho0Split`
perturbationPressureType  rho0Split;


// Properties of the Coriolis force.
planetaryRotationPeriod   $EarthPeriod;                // Earth's rotation period (hr).
latitude                  $latitude;                   // Latitude on the Earth of this site (deg).


// Write out postProcessing/sourceHistory
writeSource             $writeSource;
writeSourceInterval     $writeSourceInterval;

// ************************************************************************* //
