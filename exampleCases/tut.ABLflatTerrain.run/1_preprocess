#!/bin/bash
#SBATCH --job-name=setupTutFarm
#SBATCH --output foam1setup.log
#SBATCH --partition=debug
#SBATCH --ntasks=1
#SBATCH --time=1:00:00
#SBATCH --account=mmc

source $HOME/.bash_profile
cores=$SLURM_NTASKS

echo "Working directory is" $SLURM_SUBMIT_DIR
echo "Job name is" $SLURM_JOB_NAME
echo "Submit time is" $(squeue -u $USER -o '%30j %20V' | grep -e $SLURM_JOB_NAME | awk '{print $2}')
echo "Starting OpenFOAM job at: " $(date)
echo "using" $cores "core(s)"

# ******************************************** USER INPUT ******************************************** #
OpenFOAM-6-gcc-dev              # OpenFOAM/SOWFA version. OpenFOAM-6-{gcc,intel}-{central,dev}
precursorDir=~/OpenFOAM/rthedin-6/run/SOWFA-setups/tut.ABLflatTerrain.precursor
startTime=20000                 # Start time
nLocalRefs=2                    # Number of local refinements (serial)
nGlobalRefs=0                   # Number of global refinements (parallel) 
solver=superDeliciousVanilla
refLoc=floating                 # floating, ground. If ground, change wallModelType
wallModelType=planarAverage     # planarAverage, local
# **************************************************************************************************** #

# **************************************** PERFORM SOME CHECKS *************************************** #
if [ ! -f system/controlDict.$solver.startAt$startTime ];                      then echo "Job killed (1)"; scancel $SLURM_JOBID; fi
if [ $nLocalRefs -gt 0 ] && [ ! -f system/topoSetDict.$refLoc.$nLocalRefs ];   then echo "Job killed (2)"; scancel $SLURM_JOBID; fi
if [ ! -f $precursorDir/setUp ];                                               then echo "Job killed (3)"; scancel $SLURM_JOBID; fi
if [ ! -d $precursorDir/postProcessing/boundaryData ];                         then echo "Job killed (4)"; scancel $SLURM_JOBID; fi
if [ ! -d $precursorDir/$starTime ];                                           then echo "Job killed (5)"; scancel $SLURM_JOBID; fi  
# **************************************************************************************************** #

# ***************************** COPY APPROPRIATE FILES AND SET VARIABLES ***************************** #
cp system/controlDict.$solver.startAt$startTime        system/controlDict
cp $precursorDir/setUp                                 setUp
foamDictionary -entry "nCores" -set $cores setUp
foamDictionary -entry "wallModelAverageType" -set $wallModelType setUp

windDir=$(foamDictionary -entry "windDir" -value setUp)
if   (($windDir==0 || $windDir==360));   then inflowDir=north;
elif ((0<$windDir&& $windDir<90));       then inflowDir=northeast;
elif (($windDir==90));                   then inflowDir=east;
elif ((90<$windDir&& $windDir<180));     then inflowDir=southeast;
elif (($windDir==180));                  then inflowDir=south;
elif ((180<$windDir&& $windDir<270));    then inflowDir=southwest;
elif (($windDir==270));                  then inflowDir=west;
elif ((270<$windDir&& $windDir<360));    then inflowDir=northwest;
else touch "WARNING (1)"; fi
# **************************************************************************************************** #

# *************************************** REFINEMENT FUNCTIONS *************************************** #
refineMeshLocal()
{
   i=1
   while [ $i -le $1 ]; do
      # Select cells, refine them, and check the new mesh. refineHexMesh refines mesh and solution
      topoSet -dict system/topoSetDict.$refLoc.$i -noFunctionObjects > log.1.toposet.$refLoc.$i 2>&1
      refineHexMesh -region $refLoc -overwrite > log.1.refineHexMesh.$refLoc.$i 2>&1
      checkMesh -noFunctionObjects > log.1.checkMesh.local.$i 2>&1
      let i=i+1
   done
}

refineMeshGlobal()
{
   i=1
   while [ $i -le $1 ]
   do
      # Refine all cells and check the new mesh. refineMesh only refines mesh
      srun -n $cores refineMesh -all -parallel -overwrite -noFunctionObjects > log.1.refineMesh.global.$i 2>&1
      srun -n $cores checkMesh  -parallel -noFunctionObjects > log.1.checkMesh.global.$i 2>&1
      let i=i+1
   done
}
# **************************************************************************************************** #

# Clean up case before start 
rm -rf $startTime*
rm -rf constant/polyMesh
rm -rf constant/boundaryData

# Get information from the precursor
cp -rf $precursorDir/$startTime $startTime.fromPrec
rm -rf $startTime.fromPrec/{cellDist,uniform,CeField,U_0,T_0,k_0,p,phi*,sourc*,*BlendingFactor}
cp -rf $startTime.fromPrec $startTime

# Make the link to the boundary data
ln -s $precursorDir/postProcessing/boundaryData constant/boundaryData

# Copy the mesh from precursor
cp -rf $precursorDir/constant/polyMesh constant
#cp -rf $precursorDir/system/blockMeshDict system

# Do serial local refinement
refineMeshLocal $nLocalRefs

# Decompose the mesh and solution files
decomposePar -cellDist -force > log.1.decomposePar 2>&1

# Perform global refinements after decomposePar, avoiding load unbalance
refineMeshGlobal $nGlobalRefs

# Change the boundary conditions from cyclic everywhere to TVMIO. See readme file
srun -n $cores changeDictionary -dict system/changeDictionaryDict.TVMIO -time $startTime -enableFunctionEntries -subDict dictionaryReplacement -parallel > log.1.changeDictionary.TVMIO 2>&1

# Renumber the mesh for better matrix solver performance.
srun -n $cores renumberMesh -parallel -overwrite > log.1.renumberMesh 2>&1

# Do a final check on the mesh.
srun -n $cores checkMesh -parallel -allGeometry -allTopology > log.1.checkMesh.full 2>&1

echo "Ending OpenFOAM job at: " $(date)

# **************************************************************************************************** #
