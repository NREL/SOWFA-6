array
{
    type                sets;
    functionObjectLibs ("libSOWFAsampling.so" "libSOWFAfileFormats.so");
    enabled             true;
    writeControl        timeStep;
    writeInterval       1;
    interpolationScheme cellPoint;      // cell, cellPoint, cellPointCell
  //setFormat           vtkStructured;
    setFormat           ensight;
    fields
    (
      U
    );

    sets
    (
        // This is an example of a Cartesian structured array of sampling points
        // with box origin corner at (-15, -50, -50) m and with x, y, z side lengths
        // of (30, 100, 100) m.  There are 3 points in x, and 51 in y and z, so really
        // this looks like three highly resolved y-z sampling planes.  This is useful
        // for sampling in wind turbine wakes at different downstream locations.  This
        // format works well with the "vtkStructured" data writer.
        box.1
        {
            type               arrayStructured;
            origin            (-15.0 -50.0 -50.0);
            spanBox           ( 30.0 100.0 100.0);
            pointsDensity     (3 51 51);
            coordinateRotation
            {
                type           axesRotation;
                e1            (1 0 0);
                e2            (0 1 0);
            }
            axis               xyz;
        }

        // This is an example of a sampling array in polar coordinates.  The sampling
        // cylindrical axis starts at (15, 0, 0) m and extends to (15, 0, 0) m.  The
        // sampling only happens between radii of 25 and 50 m from the axis.  This set
        // up is not the complete cylinder in azimuth because sampling starts at 0 degrees
        // (in this case that radius points along +y) and ends at 270 degrees (in this case
        // that radius points in -z).  The sampling is 31 points in the axial, 7 points
        // in the aximuthal, and 26 points in the radial direction.  With 7 azimuthal locations
        // this ends up looking like x-r planes every 45 degrees in the azimuth.  This
        // is useful for axisymmetric problems like some wake situations.  This does not work
        // with vtkStructured, so resort to another format like unstructured vtk ("vkt") or
        // "ensight".
        cylinder.1
        {
            type               cylinder;
            axisPointStart    (-15.0 0.0 0.0);
            axisPointEnd      ( 15.0 0.0 0.0);
            radiusStart        25.0;
            radiusEnd          50.0;
            thetaStart         0.0;
            thetaEnd          270.0;
            pointsDensity     (31 7 26);
            axis               xyz;
        }
    );
}
